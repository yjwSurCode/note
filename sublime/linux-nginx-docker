LINUX：：：：：：：：：：：：：：：

# 创建文件
cat > sample.txt

# 创建目录和父目录 a,b,c,d
mkdir -p a/b/c/d 一个个层级的目录

# 拷贝文件夹 a 到/tmp 目录
cp -rvf a/ /tmp/

pwd 命令能够看到当前终端所在的目录
diff 命令用来比较两个文件是否的差异

# 压缩
tar -cvf test.tar a 将文件 a 打包为 test.tar
tar -zcvf test.tar.gz a 打包并 gzip 压缩。 #解压
tar xvf test.tar


上传文件
scp -r dist  sur@47.93.20.245:/opt/web/nginx/html 

改文件夹名称



# Nginx：：：：：：：：：：：：：：：：：：：：：：：：：：
Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 \* 24 小时不间断运行，
即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，
最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。

Nginx 的最重要的几个使用场景：
静态资源服务，通过本地文件系统提供服务；
反向代理服务，延伸出包括缓存、负载均衡等；
API 服务,OpenResty

正向代理：：：：：：：：：：：：：：：：
一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），
然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见；
eg： 🌰你的浏览器无法直接访问谷哥，这时候可以通过一个代理服务器来帮助你访问谷哥，那么这个服务器就叫正向代理。

反向代理：：：：：：：：：：：：：：：：
与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。
反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。
eg： 🌰去饭店吃饭，可以点川菜、粤菜、江浙菜，饭店也分别有三个菜系的厨师 👨‍🍳，但是你作为顾客不用管哪个厨师给你做的菜，
只用点菜即可，小二将你菜单中的菜分配给不同的厨师来具体处理，那么这个小二就是反向代理服务器

负载均衡：：：：：：：：：：：：：：：：
一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。
这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。
很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。
请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。
eg： 🌰晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口，B 口人少车空....”，这个工作人员的作用就是负载均衡。

动静分离:服务器访问量特别大的时候需要考虑 cdn

nginx 安装--使用--配置：


重启nginx
nginx -s reload



Docker：：：：：：：：：：：：：：：：
Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，
然后发布到任何流行的 Linux 或 Windows 操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口
Docker 作为轻量级虚拟化技术，拥有持续集成、版本控制、可移植性、隔离性和安全性等优势
Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 的 cgroup,namespace,以及 AUFS 类的 UnionFS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进
程,因此也称其为容器。Docker 最初实现是基于 LXC.
Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上，构建杰出的软件。
用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。

## 1: sudo yum install -y yum-utils #安装 yum-utils，因为 utils 提供了 yum-config-manager 能力

## 2: sudo  yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #安装国内的仓库保证我们后续下载 docker 中的各个应用可以快速执行，因为从国外的镜像下载实在太慢了

## 3: sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin

# reload docker
systemctl restart docker.service


# 安装最新的 docker engine
$ sudo systemctl start docker

# 启动 docker

$ sudo docker run hello-world

# 运行 docker 的 hello-world 的镜像进行测试

出现：
Hello from Docker!
This message shows that your installation appears to be working correctly.

# 安装  docker-compose

1:curl -L https://get.daocloud.io/docker/compose/releases/download/v2.15.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
2:sudo chmod +x /usr/local/bin/docker-compose
3:$ docker-compose --version

输出：
docker-compose version 1.25.1, build a82fef07

参考网站:https://www.kongzid.com/archives/docker10

# 查看镜像
docker images

## 删除镜像：删除之前要停止容器！！！！
docker rmi test-build-docker
docker rmi  2f232153cc95       //  2f232153cc95是   IMAGE ID
669513347104

# 干掉对应容器
docker rm 容器 ID(或容器名称)CONTAINER ID 



#  docker p镜像   name 是容器
 docker ps -a

1:停止运行镜像 docker stop CONTAINER ID

使用 inspect 命令可以获取镜像的详细信息
docker inspect 镜像名 docker_project/node-web-app //默认 node-web-app

https://www.cnblogs.com/zhaobowen/p/13337441.html


# 111  在有dockerfile文件的地址打包镜像

docker build -t robot .    //robot是名称 robot是RESPOSITOYRY

//! NPM INSTALL 问题需要删除 package.local.json

# 2222222  加上tag   robot是RESPOSITOYRY
docker tag robot robot:v2

build 命令用来制作镜像，-t 是给镜像打标签，-f 参数是指定 Dockerfile 路径，由于我们使用的是默认 Dockerfile 名称，
所以可以不同填写该参数。最后一个.也不要省略，表示 Dockerfile 文件的所在目录, 代表是当前路径，

# 222222 通过镜像 dockerstudy 创建一个容器并运行。
docker 容器开机自启动:sudo docker run --net host -itd --name robot --restart=always --privileged -v /dev:/dev 116.62.202.42:5001/robot_amd_v4 /sbin/ini

# 333333 
命令：：： docker run --name dockercontainer -d -p 3000:3000 robot
docker run --name robotnameroute（容器名称自取） -d -p 3002:3002 robot（镜像名称）


返回 35e1181e650c70f6b1de75a0ed62e3a007699a6733c13a3e47496eb12d0dc115

跟踪查看容器 dockercontainer 的日志输出：docker logs -f dockercontainer


查看容器时间
docker exec -u 0 -it bead089df688（容器ID 不是镜像） /bin/bash




# 优雅部署方式DockerCompose     docker-compose.yml















FROM node:14.17.0

# add mirrors

# RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# RUN apk --update add tzdata \

# && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \

# && echo "Asia/Shanghai" > /etc/timezone \

# && apk del tzdata

# RUN mkdir -p /usr/src/app

# 在容器中创建一个目录

RUN mkdir -p /usr/src/nodejs/

# 下一步在镜像中创建一个文件夹存放应用程序代码，这将是你的应用程序工作目录：

WORKDIR /usr/src/nodejs/

# add npm package

# COPY 命令用于将宿主机器上的的文件复制到镜像内，

# 如果目的位置不存在，Docker 会自动创建。但宿主机器用要复制的目录必须是和 Dockerfile 文件统计目录下。

COPY package.json /usr/src/app/package.json

# 不同服务器不同处理！！！！

RUN cd /usr/src/app/
RUN npm install

# RUN npm install --production -d --registry=http://ssr-feiniu01.dev1.fn:8080

# copy code

# 把当前目录下的所有文件拷贝到 Image(镜像) 的 /usr/src/nodejs/ 目录下

COPY . /usr/src/nodejs/

EXPOSE 3000

CMD npm start



# nginx 配置！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

server
    {
        listen 888;
        server_name phpmyadmin;
        index index.html index.htm index.php;
        root  /www/server/phpmyadmin;
            location ~ /tmp/ {
                return 403;
            }

        #error_page   404   /404.html;
        include enable-php.conf;

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /www/wwwlogs/access.log;
    }
    
server {
  listen 8081;
  server_name 129.211.219.138;
  
  location / {
    root   /www/wwwroot/dist;
    try_files $uri $uri/ @router; # 配置使用路由
    index  index.html index.htm;
  }
  
  location /prod-api/ {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP &remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header REMOTE-HOST $remote_addr;
    proxy_pass http://129.211.219.138:8080/;
  }
  
  location /profile/ {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP &remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header REMOTE-HOST $remote_addr;
    proxy_pass http://129.211.219.138:8080/profile/;
  }
  
   # 路由配置信息
   location @router {
     rewrite ^.*$ /index.html last;
   }
}

server {
  listen 80;
  server_name 129.211.219.138;
  
  location / {
    root   /www/wwwroot/competition;
    try_files $uri $uri/ @router; # 配置使用路由
    index  index.html index.htm;
  }
  
   # 路由配置信息
   location @router {
     rewrite ^.*$ /index.html last;
   }
}

include /www/server/panel/vhost/nginx/*.conf;
}