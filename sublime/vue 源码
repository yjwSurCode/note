～ Vue 2 的终止支持时间是 2023年12月31日。在此之后，Vue 2 在已有的分发渠道 (各类 CDN 和包管理器) 中仍然可用，但不再进行更新，包括对安全问题和浏览器兼容性问题的修复等。

# v2.x 与 vue3.0之间的区别:
基于 Proxy 观察者机制以满足全语言覆盖以及更好的性能；
放弃 Object.defineProperty ，使用更快的原生Proxy；
beforeCreate -> 请使用 setup()
created -> 请使用 setup()
beforeMount -> onBeforeMount
mounted -> onMounted
beforeUpdate -> onBeforeUpdate
updated -> onUpdated
beforeDestroy -> onBeforeUnmount
destroyed -> onUnmounted

# vue2 是 options API  vue3 是composition API
options API 耦合度相对较高  composition API 根据逻辑相关性组织代码，提高可读性和可维护性


# v-model
addProp(el, 'value', `(${value})`)
addHandler(el, event, code, null, true)
Object.defindProperty
observer.js 数据劫持  geter seter
compile.js 判断元素  添加监听数据的订阅者 数据变化 更新试图
watcher 订阅者 oserver compile之间通信的桥梁 发布订阅模式
mvvm

#v-model源码精髓  https://ustbhuangyi.github.io/vue-analysis/v2/extend/v-model.html#%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0
addProp(el, 'value', `(${value})`)
addHandler(el, event, code, null, true)

# vue2操作数据原理
通过Object.defineProperty()把data对象中所有属性添加到vm上。 为每一个添加到vm上的属性，都指定一个getter/setter。
在getter/setter内部去操作(读/写)data中对应的属性

tip；在vue3中允许你写多个v-model,这也是强烈的说明了，v-model就是一个语法糖，只是帮你减少了代码量，仅此而已

# Object.defindProperty 对比 proxy  (https://juejin.cn/post/6844904150560423950)
Object.defineProperty的第一个缺陷,无法监听数组变化
target 目标对象（对象、数组、函数） handler 代理对象，可以对目标对象进行自定义的操作

Object.defineProperty(argu, key, {
                configurable: true,
                enumerable: true,
                get() {
                    console.log(`get ${key} attr`)
                    return value
                },
                set(newValue) {
                    console.log(`set ${key} attr`)
                    value = newValue
                }
            })


# Proxy用法: https://juejin.cn/post/7182084369454989349

### 🌰 1
let person = {
  name: "Guest"
};

let proxy2 = new Proxy(person, {
  get: function(target, propKey, receiver) {
    console.log(target, propKey, receiver)  // {name: 'Guest'}name: "Guest"[[Prototype]]: Object 'name' Proxy(Object) {name: 'Guest'}
    return Reflect.get(target, propKey, receiver)
  }
});

proxy.name // "Guest"

### 🌰 2
const moment = {
  age: 18,
  address: "西安",
};

function foo(x, y) {
  return x + y;
}

const proxy = new Proxy(moment, {
  has: function (target, prop) {
    console.log(`使用 in 访问了 ${prop} 是否存在于 moment 对象`);
  },
  get: function (target, property, receiver) {
    # property 是实例对象的key
    console.log(`通过读取 moment 对象中的 ${property} 属性`);
  },
  set: function (target, property, value, receiver) {
    console.log(`通过设置 moment 对象中的 ${property} 属性为 ${value}`);
  },
});

const fProxy = new Proxy(foo, {
  apply: function (target, _, params) {
    console.log(target); // [Function: foo]
    console.log(params); //  [ 1, 2 ]
    return target(...params) * 10;
  },
  construct: function (target, argumentsList, newTarget) {
    console.log(target); // [Function: foo]
    console.log(argumentsList); // [ 1, 2 ]
    console.log(newTarget); // [Function: foo]
    return {};
  },
});

"age" in proxy; // 使用 in 访问了 age 是否存在于 moment 对象
proxy.age; // 通过读取 moment 对象中的 age 属性
proxy.address = "肇庆"; // 通过设置 moment 对象中的 address 属性为 肇庆

console.log(foo(1, 2)); // 3
console.log(fProxy(1, 2)); // 30

new fProxy(1, 2);


### 🌰 3
let user = {
  _name: "Guest",
  get name() {
    return this._name;
  }
};

let userProxy = new Proxy(user, {
  get(target, prop, receiver) {
    return target[prop];
  }
});

let admin = {
  __proto__: userProxy,
  _name: "Admin"
}; 
document.getElementById('common').innerHTML = admin.name  // Guest

let user2 = {
  _name: "Guest",
  get name() {
    return this._name;
  }
};

let userProxy2 = new Proxy(user2, {
  get(target, prop, receiver) {
  #??? userProxy 代理的是user对象，所以 userProxy 中 get的第一个参数 target 的值实际上是user，细品一下,这里的this 依旧是指向的是user，而不是admin。
    return Reflect.get(target, prop, receiver);
  }
});

let admin2 = {
  __proto__: userProxy2,
  _name: "Admin"
}

document.getElementById('reflect').innerHTML = admin2.name  // Admin


### 🌰 4 

let api = {
    _apiKey: 'kafakakafaka',
};
const RESTRICTED = ['_apiKey'];
api = new Proxy(api, {
    get(target, key, receiver) {
        if(RESTRICTED.indexOf(key) > -1) {
            throw Error(`${key} 不可访问.`);
        } 
        return Reflect.get(target, key, receiver);
    },
    set(target, key, value, receiver) {
        if(RESTRICTED.indexOf(key) > -1) {
            throw Error(`${key} 不可修改`);
        }
        console.log(target,target._apiKey)
        return Reflect.set(target, key, value, receiver);
    }
});


#! 以下是一些 Reflect 对象的常用方法：

1. Reflect.apply(target, thisArg, argumentsList)
   调用一个目标函数，并传递一个指定的 this 值和参数列表。

2. Reflect.construct(target, argumentsList[, newTarget])
   创建一个实例对象，使用指定的构造函数和参数列表。

3. Reflect.get(target, propertyKey[, receiver])
   获取目标对象的指定属性的值。

4. Reflect.set(target, propertyKey, value[, receiver])
   设置目标对象的指定属性的值。
   set(target, propKey, value, receiver)方法用来拦截某个属性的赋值操作，
   可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身

5. Reflect.has(target, propertyKey)
   判断目标对象是否存在指定属性。

6. Reflect.deleteProperty(target, propertyKey)
   删除目标对象的指定属性。

7. Reflect.getPrototypeOf(target)
   获取目标对象的原型对象。

8. Reflect.setPrototypeOf(target, prototype)
   设置目标对象的原型对象。

9. Reflect.ownKeys(target)
   返回目标对象自身的所有属性的数组。



#! vue diff算法
需求考虑的情况: 1属性变换 2增删变化 3位置变化

; Vue2.X Diff —— 双端比较
Vue.js使用了一种称为Virtual DOM的技术来提高渲染性能，而Virtual DOM 的实现主要基于两个算法：diff算法和patch算法。
其中，diff算法用于计算新旧虚拟DOM树的差异，patch算法则用于将计算出的差异应用到真实DOM上。
Vue.js的diff算法主要采用了双端比较的策略。它通过遍历新旧虚拟DOM树的节点来找到差异。
具体来说，算法会同时从新旧节点的首尾两端开始比较，逐步向中间靠拢。在比较过程中，如果发现新旧节点相同，
则直接进入下一个节点的比较。如果发现新旧节点不同，则根据一定的策略（如节点的key属性或tag名称）
判断是要创建、更新、移动、删除节点。比如，如果新节点的key值与旧节点的key值相同，则说明这两个节点是同一个节点，
只需要更新其内容即可。如果新节点的key值在旧节点中不存在，则说明需要创建一个新节点。如果新节点的key值与旧节点中的其他节点的key值相同，
则说明需要将当前节点移动到对应节点的位置上。如果发现旧节点有但新节点没有，则说明需要删除旧节点。
在比较完节点之后，diff算法会对需要更新的节点进行更新操作。具体来说，Vue.js会根据需要更新的节点以及差异类型，生成一组针对真实DOM的操作指令。这些指令包括插入节点、删除节点、移动节点、更新节点等等。最后，Vue.js通过执行这些操作指令，将计算出的差异应用到真实DOM上，完成渲染过程。
需要注意的是，由于diff算法是一种计算量较大的算法，因此Vue.js会通过一些优化手段来提高算法的性能。例如，Vue.js会缓存一些常用的节点、限制比较的深度、跳过静态节点等等。这些优化手段可以有效地减少diff算法的计算量，提高Vue.js的渲染性能。

Vue3 Diff —— 最长递增子序列

## 那么为什么最长递增子序列就可以保证移动次数最少呢？
因为在位置数组中递增就能保证在旧数组中的相对位置的有序性，从而不需要移动，因此递增子序列的最长可以保证移动次数的最少
对于前面的得到的位置数组[3, 1, 2]，得到最长递增子序列 [1, 2] ，在子序列内的元素不移动，不在此子序列的元素移动即可。
对应的实际的节点即 d 节点移动至b, c前面即可。




# ! 总结：：：：：：：：：：：：：：：
vue2：总的来说就是通过 Object.defineProperty 监听对象的每一个属性，当读取数据时会触发 getter，修改数据时会触发 setter。
Vue3：是通过 Proxy 对数据实现 getter/setter 代理，从而实现响应式数据

1:不需要递归遍历每个属性，添加劫持，深层对象属性只有在访问的时候才转换成 Proxy
2:对新增的属性不需要另外做劫持处理
3:不需要对数组的方法进行重定义
缺点：不兼容 ie

const obj2 = {
    a: 1,
    b: 2
}
const p4 = new Proxy(obj2, {
    defineProperty(target, property, descriptor) {
        return Object.defineProperty(...arguments)
    }
})
Object.defineProperty(p4, 'a', {
    value: 'a'
})
console.log(obj2)


setup() {
        const { proxy } = getCurrentInstance();
        onMounted(() => {
            proxy.$toast.loading({
                message: '加载中...',
                forbidClick: true,
            })
        });
 
        return {};
    }

# vue3 ref中可以放对象作为参数吗? reactive可以放基础值作为参数吗?
ref是可以传对象的, 如果传的是对象会给reactive去实现
reactive放基础值是没什么作用的

##! toRef
可以用来为源响应式对象上的某个 property 新创建一个 ref。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。

reactive 函数用于创建一个响应式的对象。它接受一个普通的 JavaScript 对象，并返回一个响应式的代理对象。
而 toRef 函数则用于将一个响应式对象的属性转换为一个 ref 对象

```
      let rightReactive = reactive({ name: "NAN" });
      let toRef_rightReactive = toRef(rightReactive, "name");
      console.log(toRef_rightReactive)
```
##! toRefs
循环遍历逐渐toRef即可

```
      let rightReactive = reactive({ name: "NAN",address:'wuhan' });
      let toRef_rightReactive = toRef(rightReactive);
      console.log(toRef_rightReactive)
```

# vue编译器， template到render过程
Vue中有个独特的编译器模块，称为“compiler”，它的主要作用是将用户编写的template编译为js中可执行的render函数。
之所以需要这个编译过程是为了便于前端程序员能高效的编写视图模板。相比而言，
我们还是更愿意用HTML来编写视图，直观且高效。手写render函数不仅效率底下，而且失去了编译期的优化能力。

在Vue中编译器会先对template进行解析，这一步称为parse，
结束之后会得到一个JS对象，我们成为抽象语法树AST，然后是对AST进行深加工的转换过程，这一步成为transform
，最后将前面得到的AST生成为JS代码，也就是render函数。


#vue2为什么只能有一个根节点
因为vdom是一个单根树形结构描述当前视图结构，patch方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。组件也是会转换成vdom，所以也必须满足单根节点要求

# vue3为什么可以多根节点
因为vue3引入了fragment概念，这是一个抽象的节点，如果发现组件是多根的会自动创建一个fragment节点，把多根节点视为自己的children。在patch时，如果发现这是一个fragment节点，则直接遍历children创建或更新


#teleport
<teleport to="#teleport-target">
  <div v-if="visible" class="toast-wrap">
       <div class="toast-msg">我是一个 Toast 文案</div>
  </div>
</teleport>


# this.$nextTick 原理

本质是对 JavaScript 执行原理EventLoop的一种应用。EventLoop其实就是事件循环
nextTick 的核心是利用了如 Promise 、MutationObserver、setImmediate、setTimeout的原生 JavaScript 方法来模拟对应的微/宏任务的实现，
本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。

1、var声明的变量，在全局范围内都有效，所以在全局只有一个变量i，每一次循环，变量i的值都会发生改变，而循环内部，被赋给setTimeout函数内部的i指向全局的i,结合之前讲的事件执行机制，最后一轮打印的i也都是3了
2、let声明的变量，let只在块及作用域中有效，并且不存在变量提升。所以每次循环在setTimeout中的i都是一个新的变量。

🤔既然每次循环的i都是一个新值，那么结果输出应该都是初始化值1呀 ？
这是因为JavaScript引擎内部会记住上一轮循环的值，初始化本轮变量i时，就在上一轮循环的基础上进行计算


定义：在下次DOM更新循环结束之后执行的延迟回调。在修改数据之后立即使用该方法，获取更新后的DOM。
原理 ：利用 Event loop 事件线程去异步操作

##  $nextTick  vue2和vue3对比

this.$nextTick(() => {
      app = new ModelLoader(
        document.getElementById('modelView')
      )
      // 加载模型
      // this.initModel(app);
    })


const handleClick = () => {
  show.value = !show.value;
  console.log(show.value, content.value);   false  ele
  nextTick(() => {
    console.log(show.value, content.value); false null
  });
};

import { ref, nextTick } from 'vue'
const handleClick = async () => {
  show.value = !show.value
  await nextTick().then((e) => {
    console.log(e, "----", show.value, content.value);
  });
  console.log(show.value, content.value)
}





Vue3新特性:：：：：：：：：：：：：：：：：：：：：：：

vue3通过10个实例小练习https://github.com/biaochenxuying/blog/issues/63

vben的vue3源码 :https://github1s.com/anncwb/vue-vben-admin

vue3源码：https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts

Proxy为什么要配合Reflect使用：https://juejin.cn/post/7080916820353351688


忽略.vue后缀
export default defineConfig({     // vite umi??
  resolve: {
    extensions: ['.js', '.ts', '.jsx', '.tsx', '.json', '.vue']
  }
})

参考链接：https://juejin.cn/post/6986838175062687752	


# computed watch 区别：：：：：：：：：：
computed  是计算属性,依赖其它属性值，并且 computed 的值有缓存,只有它依赖的属性值发生改变,下一次获取 computed 的值时才会重新计算 computed  的值；
watch 更多的是「观察」的作用,类似于某些数据的监听回调 ,每当监听的数据变化时都会执行回调进行后续操作；


# 异步组件
// const AsyncCategory = defineAsyncComponent(() => import("./AsyncCategory.vue"))

//   import Loading from './Loading.vue';

//   const AsyncCategory = defineAsyncComponent({
//     loader: () => import("./AsyncCategory.vue"),
//     loadingComponent: Loading,  占位组件，当AsyncCategory还没加载出来时候，显示这个组件
//     errorComponent: 当AsyncCategory加载失败出现
//     delay: 2000, 在显示loadingComponent组件之前, 等待多长时间
//     /**
//      * err: 错误信息,
//      * retry: 函数, 调用retry尝试重新加载
//      * attempts: 记录尝试的次数
//      */
//     onError: function(err, retry, attempts) {
//     }
//   })



//内置组件  defalult可以显示 不可以显示就显示fallback
// < suspense >
{/* <template #default>
    <async-category></async-category>
  </template>
  <template #fallback>
    <loading></loading>
  </template>
</ > */}

state：包含了store中存储的各个状态。
getter: 类似于 Vue 中的计算属性，根据其他 getter 或 state 计算返回值。
mutation: 一组方法，是改变store中状态的执行者，只能是：同步：操作。
action: 一组方法，其中可以包含异步操作。：：：

store.commit('increment')

想要异步地更改状态，就需要使用action。action并不直接改变state，而是发起mutation。
actions: {
    increment (context) {
      context.commit('increment')
    }
  }



浅析vue-cli脚手架@vue/cli-service源码：：：：：：：：：：：：：：：：：：

vue-cli使用指南：https://cli.vuejs.org/zh/dev-guide/plugin-dev.html

vue create vue-cli-app ------ vue-cli-service build

使用npm run script 命令时,直接会找到node_modules/.bin下面对应的脚本,windows系统对应vue-cli-service.cmd命令,类unix系统是/bin/sh命令
开始执行vue-cli-service.js
Service实例化后,又到vue-cli-service.js中,执行service run方法
config 下的base.js css.js 等webpack配置模块都会执行chainWebpack方法,以base模块为例
build方法会根据命令行参数,加载不同的模块来处理webpack配置


# VUE2.6使用VueCompositionAPI 
import VueCompositionAPI from '@vue/composition-api'
Vue.use(VueCompositionAPI)


# Vue3用法 https://v3.cn.vuejs.org/

1：context
export default {
  setup(props, context) {
    // Attribute (非响应式对象，等同于 $attrs)
    console.log(context.attrs)

    // 插槽 (非响应式对象，等同于 $slots)
    console.log(context.slots)

    // 触发事件 (方法，等同于 $emit)
    console.log(context.emit)

    // 暴露公共 property (函数)
    console.log(context.expose)
  }
}

2：nextTick
将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。
 setup() {
    const message = ref('Hello!')
    const changeMessage = async newMessage => {
      message.value = newMessage
      await nextTick()
      console.log('Now DOM is updated')
    }
  }

3：slot
parents.vue： 
 <ModulePopup popupState="module">
      <template v-slot:slotModule>
        <p class="card-header-title">优先显示我</p>
      </template>
    </ModulePopup>
child.vue：
  <slot name="slotModule">
        我是插槽，父组件标签中没有填写信息，我就是默认的
      </slot>

slot传值（子传父）：
child.vue:
 <slot :text="text"
        >我是传值插槽，父组件标签中没有填写信息，我就是默认的</slot
      >

parents.vue:
<ModulePopup popupState="module">
      <template v-slot:default="slotProps">
        <p class="card-header-title">优先展示{{ slotProps }}</p>
      </template>
    </ModulePopup>

slot传值（子传父）：


4：emit
父组件： <emit-child @on-change="emitFn" />
const emitFn = v => {
      console.log(v);
    }
子组件: <button @click="clickBtn" class="btn-item">hi~</button>  
const clickBtn = () => {
      ctx.emit("on-change", "hi~");
    };
  
5：Provide / Inject

6：其他API
reactive toRefs： 
setup(){
    const data = reactive({
      name: "小四",
      age: 18,
      year: computed({
        get: () => {
          return 2020 - data.age;
        },
        set: (val) => {
          data.age = 2020 - val;
        },
      }),
    });
    return {
      ...toRefs(data),//讲响应式的对象变为普通对象 在家。。。结构，在模板中就可以直接使用属性，不用data.name
    };
  },
computed： 接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 ref 对象。
watchEffect： 立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。
watch：
watch(count, (count, prevCount) => {
  /* ... */
})
watch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {
  /* ... */
})
惰性地执行副作用；
更具体地说明应触发侦听器重新运行的状态；
访问被侦听状态的先前值和当前值。
getCurrentInstance：
getCurrentInstance 支持访问内部组件实例。
const internalInstance = getCurrentInstance()



##  pinia
https://stackblitz.com/github/piniajs/example-vue-3-vite?file=src%2FApp.vue




# vue2 用法
<template>
  <div class="hello">
    <button @click="change(value - 1)">-</button>
    <span>{{value}}</span>
    <button @click="change(value + 1)">+</button>
  </div>
</template>

<script>
export default {
  name: "HelloWorld",
  props: {
    value: Number,
  },
  methods: {
    change(val) {
      this.$emit("update:value", val);
    },
  },
};
</script>
复制代码
APP 来使用
<HelloWorld :value="inputVal" @update:value="inputVal = $event" />
等效于
<HelloWorld v-model="inputVal" />


<!-- vue2 -->
<Comp :title="inputVal" @update:title="inputVal = $event" />
<!-- 简写为 -->
<Comp :title.sync="inputVal" />

<!-- vue3 -->
<Comp :title="inputVal" @update:title="inputVal = $event" />
<!-- 简写为 -->
<Comp v-model:title="inputVal" />



多个v-model

<ChildComponent v-model:title="pageTitle" v-model:content="pageContent" />

<!-- 是以下的简写： -->

<ChildComponent
  :title="pageTitle"
  @update:title="pageTitle = $event"
  :content="pageContent"
  @update:content="pageContent = $event"
/>



# Nuxt
npx nuxi@latest init <my-project>



## typescript 
yarn add --dev vue-tsc typescript



静态资源部署


ssr形式部署