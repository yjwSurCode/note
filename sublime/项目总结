项目：
react pc网站 
小程序
expo RN app
企业级组件库开发
threejs ERP系统和物联网三维监控系统
next 签证网站
node+docker+nginx+mysql 学生教师提交作业批改作业和在线交流系统的后台  node基于express的脚手架 
研究 vite Webpack 原理和区别 掘金发布一些文章和 npm上发布一些工具包

项目描述：
项目背景：
项目目标：
项目难点：
项目收获：
项目总结：
项目成果：
项目进度：
项目时间：
项目经验：
项目能力

具备能力：


#! 鑫青盟官网：https://www.xqmcm.com/#/。 ：：：：：：：：：：：
react ts 类组件 redux  redux-thunk  -----------Redux store 仅支持同步数据流。
使用 thunk 等中间件可以帮助在 Redux 应用中实现异步性。

const mapStateToProps = (state) => ({
  valueS: state
})

<Provider store={ store }>

const store =  createStore(reducers, {     //合并多个 reducer     reducers就是操作数据的方法
    countReducer:initialState,
    countReducer1:initialState1
}, applyMiddleware(thunk));

export  function  mapDispatchToProps(dispath:any){
    return{
               derM:()=> dispath(actions.decrementCount('ni')),
               todoM:()=>dispath(actions.todolistAction(1) )// 在这里定义  就要在 render 里面 实现

    }
}

bar(connect(mapStateToProps, mapDispatchToProps)(home))

有thunk可以进行异步请求

TodoAPIUtil
      .fetchTodos()
      .then(todos => dispatch(receiveTodos(todos)))


#! 教师端(公众号 vue )：https://xqmcm.com/app/teacher/index.html 

2.1-----history模式配置失败的原因可能是url带参数没有用encodeURIComponent

2.2-----(要保证你的h5页面域名和公众号后台js安全域名一致）

2.3-----微信分享到朋友圈onMenuShareTimeline成功后的回调函数不执行的问题
setTimeout(function(){undefined
          将指定的代码移出本次执行,等到下一轮Event Loop
     }, 500);
     
2.4-----支付、购买
    /**
     * 购买支付-充值-向微信发起获取openid请求，请求成功后微信会将openid返给后台   --- 1   备注： 登录后查看后台返回的openid是否有值，若没有值，则向微信发送请求  (不要走接口，直接跳链接)
     */
    applyForOpenid(params) {
        let serverUrl = urlencode(baseconfig.baseURL)
        return Get(`https://open.weixin.qq.com/connect/oauth2/authorize?appid=**yourappid**&redirect_uri=${serverUrl}/oauth/val&response_type=code&scope=snsapi_base&state=${params}#wechat_redirect`)
    },
    /**
     * 购买支付-充值-从后台获取微信返回的openid   --- 2 备注：充值时先看cookie中openid是否有值，若没有值，则从后台请求openid，请求回来也要存入cookie；然后调接口获取微信支付接口所需信息--打开支付界面进行支付
     */
    getOpenid(params) {
        // return Get(`/wechatusercenter/getOpenid?userid=${params.userid}`)
        return Get(`/oauth/openidByWeb?code=${params.code}&state=${params.userid}`)
    },
    /**
     * 购买支付-充值-从后台获取微信支付接口所需信息   --- 3
     */
    getWeChatPayInfo(params) {
        return Post('/wechatorders/recharge',params)
    },
    /**
     * 购买支付-充值-打开微信支付界面进行支付   --- 4
     */
2.5-----微信登陆


#! 团长端微信小程序。
3.1-----监听订单变化 单一修改 不需要批量更新

step 111
	 核销订单 
	async confirmOrder(params: { orderNo: string }): Promise<void> {
		const detail = await this.getOrderDetail({ orderNo: params.orderNo });
		this._events.emit('order:detail:change', detail);
	}

step 222
# /** 监听订单状态改变 */
subscribeOrderDetailChange(listener: (order: IOrderPage.OrderDetail) => void): () => void {
		//5
		this._events.on('order:detail:change', listener);

		return () => {
			this._events.off('order:detail:change', listener);
		};
	}

step 333      回显 事先监听  当出发核销订单  触发回调 111111  4444
useOrderDetailChange(detail => { //4

	});

export function useOrderDetailChange(cb: (order: IOrderPage.OrderDetail) => void): void {
	const cbFn = usePersistFn(cb);

	useEffect(() => {
		const unSubscribe = orderApi.subscribeOrderDetailChange(no => {  //2222222
			cbFn(no);
		});
		return unSubscribe;
	}, [cbFn]);
}

#! 解锁 上锁 竟态锁
只允许一个线程写入（其他线程既不能写入也不能读取）当完成是其他的线程可以继续
没有写入时，多个线程允许同时读（提高性能）

案例：：：：：接口如何防刷 
同一客户端次数限制。这个前端的一般使用是给接口调用加锁，在返回结果或者一定时间之后解锁。

3.3-----输入框的 防流 节抖：：：：：：：：：：：：：：：：：：
const debouncedValue = useDebounce(values, 200);
	useDebounceFn(
		() => {
			alert(1111);
		},
		[value],
		2000,
	);

#! web-animations-js polyfill：：：：：：：：：
css实现动画
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(1800deg);
  }
}
.circle {
  width: 100px;
  height: 100px;
  background-color: red;
  animation: rotate 5s infinite linear;
}

缺点: 扩展性不强 功能不完整  如 回调函数

../note/sublime/assets/note2024-01-03-16-27-44.png

#?? 三次方贝塞尔曲线  一阶函数 二阶函数  二项式定理

没有找到 window.requestAnimationFrame 

1. `ease`：默认值。动画开始和结束时速度较慢，中间过程速度加快。
2. `ease-in`：动画开始时速度较慢，然后逐渐加快
3. `ease-out`：动画开始时速度较快，然后逐渐减慢。
4. `ease-in-out`：动画开始和结束时速度较慢，中间过程速度加快，然后再减慢。
5. `linear`：动画的速度始终保持恒定，没有加速或减速。
6. `step-start`：动画在开始时立即跳跃到结束状态。
7. `step-end`：动画在结束时立即跳跃到结束状态

easing:'cubic-bezier(1,0.01,0,1)'

- P0：(0, 0) - 这是时间曲线的起点，代表动画开始时的时间和进度。
- P1：(1, 0.01) - 这是时间曲线的第一个控制点，用于调整动画的速度和进度变化。在这个例子中，P1 的 y 坐标为 0.01，稍微向上偏移了一点，以使动画在开始时稍微慢下来。
- P2：(0, 1) - 这是时间曲线的第二个控制点，同样用于调整动画的速度和进度变化。在这个例子中，P2 的 x 坐标为 0，使得动画在结束时稍微慢下来。
- P3：(1, 1) - 这是时间曲线的终点，代表动画结束时的时间和进度。

(function () {
	let lastTime = 0;
	if (!window.requestAnimationFrame)
		window.requestAnimationFrame = function (callback) {
			const currTime = new Date().getTime();
			const timeToCall = Math.max(0, 16 - (currTime - lastTime));
			const id = window.setTimeout(function () {
				callback(currTime + timeToCall);
			}, timeToCall);
			lastTime = currTime + timeToCall;
			return id;
		};

	if (!window.cancelAnimationFrame)
		window.cancelAnimationFrame = function (id) {
			clearTimeout(id);
		};
})();

首先,这是一个立即执行函数表达式(Immediately Invoked Function Expression,IIFE),它会立即执行其中的代码。
1. `let lastTime = 0;` - 定义一个变量 lastTime，用于存储上一次调用回调函数的时间戳。
2. `if (!window.requestAnimationFrame)` - 检查浏览器是否支持 requestAnimationFrame 方法。如果不支持，则进入 if 条件中。
3. `window.requestAnimationFrame = function (callback) { ... }` - 创建一个兼容的 requestAnimationFrame 方法。这个方法接受一个回调函数作为参数。
4. `const currTime = new Date().getTime();` - 获取当前时间的时间戳。
5. `const timeToCall = Math.max(0, 16 - (currTime - lastTime));` - 计算下一次调用回调函数的时间间隔。16 毫秒是一个常用的刷新频率，用于实现每秒约 60 帧的动画效果。
6. `const id = window.setTimeout(function () { ... }, timeToCall);` - 使用 setTimeout 方法来延迟调用回调函数。延迟的时间是 timeToCall。
7. `lastTime = currTime + timeToCall;` - 更新 lastTime 的值，以便下一次调用时可以计算正确的时间间隔。
8. `return id;` - 返回 setTimeout 方法的返回值，以便可以使用它来取消延迟调用。
9. `if (!window.cancelAnimationFrame)` - 检查浏览器是否支持 cancelAnimationFrame 方法。如果不支持，则进入 if 条件中。
10. `window.cancelAnimationFrame = function (id) { ... }` - 创建一个兼容的 cancelAnimationFrame 方法。这个方法接受一个延迟调用的 id 作为参数。
11. `clearTimeout(id);` - 使用 clearTimeout 方法取消延迟调用。
通过以上代码，我们可以在不同浏览器中使用 requestAnimationFrame 和 cancelAnimationFrame 方法，以实现更加流畅的动画效果，并且无需担心浏览器兼容性问题。

#!单点登录
1、一个系统登录流程：用户进入系统——未登录——跳转登录界面——用户名和密码发送——服务器端验证后，设置一个cookie发送到浏览器，设置一个session存放在服务器——用户再次请求（带上cookie）——服务器验证cookie和session匹配后，就可以进行业务了。
2、多个系统登录：如果一个大公司有很多系统，a.seafile.com, b.seafile.com,c.seafile.com。这些系统都需要登录，如果用户在不同系统间登录需要多次输入密码，用户体验很不好。所以使用 SSO (single sign on) 单点登录实现。
3、相同域名，不同子域名下的单点登录：在浏览器端，根据同源策略，不同子域名的cookie不能共享。所以设置SSO的域名为根域名。SSO登录验证后，子域名可以访问根域名的 cookie，即可完成校验。在服务器端，可以设置多个子域名session共享（Spring-session）
4、不同域名下的单点登录:CAS流程:用户登录子系统时未登录,跳转到 SSO 登录界面,成功登录后,SSO 生成一个 ST (service ticket )。用户登录不同的域名时，都会跳转到 SSO,然后 SSO 带着 ST 返回到不同的子域名，子域名中发出请求验证 ST 的正确性（防止篡改请求）。验证通过后即可完成不同的业务。
../note/sublime/assets/note2023-12-08-09-10-38.png

子域会自动继承父域中的 Cookie。



# 4 转盘游戏(桥接至app 支付宝小程序 微信小程序)。 
4.1-----页面跳转
loadScript('//res.wx.qq.com/open/js/jweixin-1.6.0.js');  RwMutex  writeLock

4.2-----登录 分享:
const env = await PLATFORM_BRIDGE.getRunningEnv();
微信环境----ios的 ua 中无 miniProgram，很坑爹,但都有 MicroMessenger（表示是微信浏览器）

4.3-----安卓ios-----webview
async setNavWechatShare(shareInfo: NativeWechatShareInfo): Promise<void> {
		this.invokeBridge('setNavWechatShare', shareInfo);
	}
const iosBridge = win.webkit && win.webkit.messageHandlers && win.webkit.messageHandlers.FNJSBridge;
const androidBridge = win.FNJSBridge;

iosBridge.postMessage(msg);
androidBridge.callHandler(method, param ? JSON.stringify(param) : '', id);

# 4.4-----usePersistFn可以保证函数地址永远不会变化：：：：：：：：：：：   将函数存在useRef中
子组件回调 onLuckDraw={handleLuckDraw}

handleSubmit

父组件 setSelectKey(_index + 1) 改变 selectKey

子组件依赖key   selectKey  

当其改变的时候会触发 handleLuckDraw  这个函数回调会触发(回调展示抽中奖品)onViewPrize  改变 setSelectKey(null);

  useEffect(() => {
        if (selectKey !== null) {
            handleLuckDraw(selectKey);   //这个方法又触发父组件的回调    父组件的回调中又改变selectKey
        }
    }, [selectKey, handleLuckDraw]);

    const handleLuckDraw = usePersistFn((v: number) => { })

export function usePersistFn<T extends (...args: any[]) => any>(fn: T): T {
	const fnRef = useRef<T>(fn);
	fnRef.current = fn;

	const persistFn = useRef<T>();
	if (!persistFn.current) {
		persistFn.current = function (...args) {
			// eslint-disable-next-line @typescript-eslint/ban-ts-comment
			// @ts-ignore
			// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
			return fnRef.current!.apply(this, args);
		} as T;
	}

	// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	return persistFn.current!;
}




#?? 贝兹尔曲线  一阶函数 二阶函数  二项式定理


4.6
rafPolyfill  raf


# 5  近零能耗建筑节能监控系统

近零能耗建筑节能监控系统提供了
以建筑信息模型(BIM)为基础的互联网+能源管理平台，
平台结合了多种建筑暖通、供电、供水相关的先进技术手段，
针对水、电等重要能源以及排污量进行合理高效地管理和控制，
实现了建筑“零耗能，零排放”的目标。电等重要能源以及排污量进行合理高效地管理和控制，
实现了建筑“零耗能，零排放”的目标。相关的先进技术手段，针对水、电等重要能源以及排污量进行合理高效地管理和控制。

节能分布
碳排放量
暖通减碳
用电信息
用水信息




# 秒杀系统(taro node  express  sequelize  mysql  redis  nginx  docker  docker-compose)


# taro 小程序 


#5 fnx react-hooks移动端组件 (https://rockcookies.github.io/fnx-ui/#/zh-CN/components/badge)


.umi   是可扩展的企业级前端应用框架
gulp   gulp是一个基于流的构建工具
lerna  是一个专门用于管理带有多个包的JavaScript项目的工具，可以帮助进行npm发布及git上传

1：lerna init 生成 packages
2：yarn dev----------------lerna exec -- [..args] # 在所有包中运行该命令    "dev": "lerna exec --scope fnx-ui yarn dev",
3：项目使用vite构建
4：开发一个符合公司的脚手架

6.2：问题
不能识别md文件？
为什么webpack可以引入loader的方式加载md文件？
如何编写vite插件？
vite不是基于webpack为什么不可以引入loader怎么写插件解决？


(前提创建一个项目需要用别人的脚手架 比如: vue-cli create-react-app)
# 定制公司项目脚手架 



#  视频分片   二进制流
https://juejin.cn/post/7263776537749323831




# 视频进入视口播放
https://juejin.cn/post/7226187878321471549

？？？
8： 项目开发--打包---提交git---部署服务器----发布 



# webpack

手写webpack打包工具的loader
手写webpack打包工具的插件plugin
实现简易版webpack

# 文件上传 七牛云 阿里OSS



# 大厂代码规范

#! eslint 
作用：代码质量检查  代码格式化

#! prettier
Prettier的作用是对代码进行格式化，并不关注代码质量潜在问题的检查

#!  husky
git 提交规范


###! 前端项目架构搭建

1：单独抽离公共组件  ErrorBoundary PageLoading

2：config路径处理 比如静态路径地址 不同环境服务器地址

3：打包发布 自动化CI-CD

4：常用hooks和utils函数引入

5：函数和组件的测试用例

6：请求的封装  入参 请求头 请求类型   请求接口前缀  返回值处理   错误处理

7：代码规范 eslint prettier

8：构建工具的配置


##! 前端性能优化

【减少重定向】
尽量避免使用重定向，当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，
也没有任何组件会被下载，降低了用户体验

如果一定要使用重定向，如http重定向到https，要使用301永久重定向，而不是302临时重定向。
因为，如果使用302，则每一次访问http，都会被重定向到https的页面。而永久重定向，在第一次从http重定向到https之后 ，每次访问http，会直接返回https的页面

【使用DNS预解析】
  当浏览器访问一个域名的时候，需要解析一次DNS，获得对应域名的ip地址。在解析过程中，按照浏览器缓存、系统缓存、路由器缓存、ISP(运营商)DNS缓存、根域名服务器、顶级域名服务器、主域名服务器的顺序，逐步读取缓存，直到拿到IP地址
  DNS Prefetch，即DNS预解析就是根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短DNS解析时间，来提高网站的访问速度
  方法是在 head 标签里面写上几个 link 标签
  对以上几个网站提前解析 DNS，由于它是并行的，不会堵塞页面渲染，这样可以缩短资源加载的时间

link 代替 @import
加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。




#! 浏览器兼容性问题 ：：：：：：：：：：：

@vitejs/plugin-legacy

1:通过rollup构建了面向低版本的资源 
rollup cjs esm umd
2:在html入口增加了nomodule的兼容

css兼容性：

			postcss: {
				plugins: [
					autoprefixer({
						overrideBrowserslist: COMPILE_TARGETS,
					}),
				],
			},

比如：：：

* html .test { color: #090; }       /* For IE6 and earlier */
* + html .test { color: #ff0; }     /* For IE7 */

.container {
	display: flex;
	flex-direction: row;
}

需要增加兼容 chrome49 以及 chrome79 以上的样式
.container {
	display: flex;
	flex-direction: column;
	height: 100%;
	min-height: 0;
}


; 浏览器前缀 ：
-moz代表firefox浏览器私有属性
-ms代表IE浏览器私有属性
-webkit代表chrome、safari私有属性
-o代表opera私有属性

; js兼容性
可以使用 const 关键字或 var 关键字来定义常量；IE下，只能使用 var 关键字来定义常量。
解决方案：统一使用 var 关键字来定义常量。



; 1： terser + Rollup 兼容旧浏览器
import { terser } from 'rollup-plugin-terser';
import getBabelOutputPlugin from '@rollup/plugin-babel';

export default {
  input: 'src/load.js',
  plugins: [
    // https://github.com/terser/terser#minify-options
    terser({
      ecma: '5',
      compress: true,
      mangle: true,
    }),
    getBabelOutputPlugin({
      babelHelpers: 'bundled',
      presets: [
        ['@babel/preset-env', {
          targets: '> 0.25%, last 2 versions, Firefox ESR, not dead',
        }],
      ],
    }),
  ],
  output: {
    file: 'dist/load.js',
    format: 'iife',
    sourcemap: false,
  },
};

# react-i18next 国际化


#! 代码的调试
consle.log()
debugger
charles


# js: 垃圾回收 内存泄漏 简单原型 去重 闭包和递归  
# ts: 
# 浏览器: 缓存 请求 安全
# react: hooks
# webpack: 构建流程 plugin loader 
# 国际化


#! 前端理解+ 核心竞争力
前端工程师主要面向用户、浏览器、数据接口，处于设计与后台的中间领域，起到承上启 下的作用，
这也要求前端工程师的知识面在横向上必须要广，服务器技术要懂，产品与交互也要懂。

技术到位 + 需求综合解决方案 逻辑能力 阅读代码理解能力  业务需求分析能力

#! 前端发展趋势
1:自动编码平台
自从引入 GitHub Copilot 以来，编码繁重的工作已经开始不再需要开发人员转而依赖 AI。票

2:新兴技术不断涌现
2.1 WebAssembly(Wasm):WebAssembly是一种低级字节码格式,可以在浏览器中运行高性能的编译语言,如C/C++和Rust。 (https://zhuanlan.zhihu.com/p/42718990)
它可以提供比传统的JavaScript更快的执行速度,使得前端能够处理更复杂的计算任务。
WebAssembly(wasm) 是一个基于二进制操作指令的栈式结构的虚拟机，wasm可以被编译为机器码，可以更快，
更高效的执行本地方法和硬件资源，通过和js协作，前端可以实现更快，更复杂的计算和应用。 不仅可以嵌入浏览器增强web应用，也可以应用于其他的场景

想一想除了浏览器之外你所使用软件：游戏，视频编辑，3D渲染或音乐制作。
这些应用程序需要执行大量计算，并且需要很高的性能。JavaScript 很难满足这种高性能的要求。


2.2 WebVR和WebAR:虚拟现实(VR)和增强现实(AR)技术在Web前端领域也得到了广泛的应用。通过WebVR和WebAR技术，开发人员可以在浏览器中创建沉浸式的虚拟和增强现实体验，无需用户安装额外的应用程序。
2.3 WebRTC:WebRTC是一种用于实时音视频通信的开源项目。它允许浏览器之间直接进行点对点的音视频传输，为Web应用程序提供了实时通信的能力，如视频会议、实时游戏等
2.4 国际化 国际化则要求Web应用程序能够适应不同地区和语言环境，提供多语言支持和本地化的内容。


3: 服务端渲染 SEO
SSR(Server-Side Rendering)和SSG(Static Site Generation)

很多人感觉Web 开发已大势已去，但很明显该领域仍在发展壮大。
虽然自动编码平台可以接管部分工作，但始终需要优秀的前端 Web 开发人员解决 UI 和 UX 问题并紧跟行业趋势。
无论你是从事前端开发的专业人士，还是对这个领域感兴趣的初学者，始终保持学习和更新的心态，
才能够在这个充满变化的领域中不断前进，不断突破自我，成为一名优秀的前端开发者。

#! 未来职业规划：
近期发展
1. 技术方面:我计划继续学习前端开发的相关知识，并深入研究前端框架和库，如React、Vue
4: 学习后端开发：我计划学习后端开发的相关知识，并实践在实际工作中，因为我相信掌握后端开发技能，可以让我更好地与前端开发人员合作，并实现更复杂的应用程序。
或者开发一些提高团队效率的工具（钉钉提示器 测试图片服务器）
3: 运维方面：我计划继续学习运维相关的知识，并实践在实际工作中，因为我相信掌握运维技能，可以让我更好地维护和优化系统。

长远发展
2. 职业方面：我计划转向项目管理或者团队领导方面的工作，因为我相信在团队中担任领导或者项目经理的角色，可以让我更好地管理和指导。

#! 个人优势和缺点

1. 技术熟练:我在前端开发领域有着扎实的技术基础和广泛的知识面。我熟悉HTML、CSS和JavaScript等前端核心技术，并且能够灵活运用各种框架和库，如React、Vue和Angular等，来开发复杂的网页和应用程序。
2. 解决问题能力：我具备良好的问题解决能力和逻辑思维能力。在面对技术难题或者项目中的挑战时，我能够迅速分析问题的根源并提出解决方案。我善于独立思考和主动学习新的技术，以不断提升自己的解决问题的能力。
3. 团队合作：我具备良好的团队合作精神和沟通能力。我乐于和团队成员进行合作，共同解决问题和推动项目的进展。我能够有效地与设计师、后端开发人员和产品经理进行沟通和协作，以保证项目的顺利进行。
4. 用户体验导向：我注重用户体验，致力于为用户提供友好、易用和高效的网页和应用程序。我能够理解用户需求，并将其转化为具体的设计和功能。我熟悉响应式设计和可访问性的原则，并能够将其应用到项目中，以确保用户能够在不同设备上获得一致的良好体验。
5. 项目管理能力：我具备良好的项目管理能力和时间管理能力。我能够合理安排任务和优化工作流程，以保证项目按时交付并达到预期的质量标准。我善于与项目相关方进行沟通和协调，以保证项目的顺利进行。

总体而言，我作为一名有五年经验的前端开发人员，我对自己的技术能力、问题解决能力、团队合作能力、用户体验导向和项目管理能力有着自信。我不断学习和探索新的技术，以不断提升自己的专业水平，并为项目的成功和用户的满意而努力



缺点是：我有时候过于注重技术细节（代码排序算法对比,花费过多的时间去优化代码的结构和命名规范，以及使用最新的技术和语法特性），可能会陷入过度优化的思维模式。这可能导致我花费过多的时间和精力在微小的技术细节上，而忽略了更重要的项目需求和用户体验。
我正在积极改进这一些，提高代码的可读性和可维护性，通过更好的项目规划和时间管理，以及更加注重整体目标和用户需求，来平衡技术细节与项目目标之间的关系。