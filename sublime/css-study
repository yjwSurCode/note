# 伪类(pseudo-classes) 伪元素(Pseudo-elements)
伪类：其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如 :focus :hover :first-child 
:active选择活动的链接
:checked选择每个被选中的元素
:disabled选择每个被禁用的元素。
:empty选择没有子元素的每个元素。
:enabled选择每个已启用的元素。
:first-child选择作为其父的首个子元素的每个元素。
:first-of-type选择作为其父的首个元素的每个元素。
:last-child 选择作为其父的最后一个子元素的每个元素。
:last-of-type选择作为其父的最后一个元素的每个元素。:not(selector):not(p)选择每个非元素的元素。
:nth-child(2)选择作为其父的第二个子元素的每个元素。
:nth-last-child(2)选择作为父的第二个子元素的每个元素，从最后一个子元素计数。
:nth-last-of-type(2)选择作为父的第二个元素的每个元素，从最后一个子元素计数

伪元素：核心就是需要创建通常不存在于文档中的元素，比如::before ::after ::first-line ::first-letter 
伪类和伪元素分别用单冒号:和双冒号::来表示


# CSS选择符
（1）id选择器(#myid）
（2）类选择器(.myclassname)
（3）标签选择器(div,h1,p)
（4）后代选择器(h1 p )
（5）相邻后代选择器(子)选择器(ul>li)
（6）兄弟选择器(li~a)
（7）相邻兄弟选择器(li+a)
（8）属性选择器(a[rel="external"])
（9）伪类选择器(a:hover,li:nth-child)
（10）伪元素选择器()::before、::after)
（11）通配符选择器(*)

input:not([type="submit"]){
  border:1px solid red;
} 使type不是submit的input边框变化

:empty  空元素
elem:first-of-type选中父元素下第一个elem类型元素。


# 浮动(float)与绝对定位(position:absolute/fixed)之间的区别：
(1)浮动会使元素脱离文档流,但是不会脱离文本流,在于其他盒子的文本内容计算布局的时候,还是占位置的。
(2)绝对定位会使元素脱离文档流,同时也会脱离文本流, 在于其他盒子的文本内容计算布局的时候,不占位置。

设置float属性之后,父元素的高度为0,这就是所谓的高度塌陷


# 清除浮动： 
1：clear: both;
2：父元素  overflow: auto;
3：父级 div定义伪类::after 和 zoom:1
.container::after {
  content: "";
  display: table;
  clear: both;
}


# 标准(W3C)盒子模型：
width = 内容宽度（content） + border + padding + margin
#  低版本IE盒子模型： 
width = 内容宽度（content + border + padding）+ margin


#box-sizing是什么
设置CSS盒模型为标准模型或IE模型。标准模型的宽度只包括content,IE模型包括border和padding
box-sizing属性可以为三个值之一：
content-box：默认值,只计算内容的宽度,border和padding不计算入width之内
padding-box：padding计算入宽度内
border-box：border和padding计算入宽度之内


# vertical-align (inline-block依赖型元素)  https://www.zhangxinxu.com/wordpress/2010/05
inline/inline-block/block 液态/固液混合态/固态

vertical-align只应用于行内元素和替换元素(不影响块级元素的内容对齐 但是影响表单元素的垂直对齐)
只能应用于内联元素以及 display 值为 table-cell inline 的元素。

触发条件：
父元素设置 display:inline-block line-height: 200px;
子元素中设置inline-block

text-align:center 这个只对行内元素有效，所以我们要使用 text-align:center 就必须将子元素设置为 display: inline  或者 display: inline-block
# vertical-align 与 line-height 之间的关系



# 有无继承性的属性：：：：：：：：：：：：：：：
继承： 字体 文本 列表

input, textarea, img, video, object {
 box-sizing: border-box;
} 

全屏显示 100vh 
&::before {
    content: '';
    height: 0.5px;
    display: block;
  }

# 一行或多行超出显示省略

overflow:hidden 超出的文本隐藏
text-overflow:ellipsis 溢出用省略号显示
white-space:nowrap 溢出不换行

overflow:hidden; 
text-overflow:ellipsis;
display:-webkit-box; 
-webkit-box-orient:vertical;
-webkit-line-clamp:2;


# 水平垂直居中：：：：：：：：
1: position:reletive 对应的子元素要设置 position:absolute,然后使用 top:50%;left:50%

2: width:100% , height:100% , line-height 100%  , text-aglin:center

3: display:flex +margin:auto

4: 父：position: relative height: 600px;
   子：position: absolute----top: 0----left: 0-----right: 0------bottom: 0-----margin: auto-----width: 300px----height: 300px;

5:文档fixed+ :after {
  content: "";
  display: inline-block;
  height: 100%;
  vertical-align: middle;
}

6: height有一个高度-----display: grid  place-content: center;

7: 父：display: table text-align: center 子：display: table/table-cell vertical-align: middle 不限定宽高

8:伪元素 父级after {
    content:'';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }
  子级：{
  width: 500px;
  height: 500px;
  background-color: red;
  display: inline-block;
  vertical-align: middle;
  }
9transform+ absolute 方案
  父：position: relative width: 500px height: 500px
  1方案子：position: absolute  width: 100px height: 100px left: 50%  top: 50%  margin-left: -50px  margin-top: -50px;  /* margin-top值为自身高度的一半 宽度同理*/
  2方案子：position: absolute  top: 50% left:50%  transform: translate(-50%,-50%); 

10: 图片和文字垂直居中 ：：：：：：：：：：：：：：：：：：：：：：：：：：：：：：：
.wrapper::after {
content:'',
display:inline-block,
vertical-align:'middle',
height:'100%',
}
.wrapper>img{
vertical-align: middle;
}

#css 控制防抖：：：：：：：：：：：：https://juejin.cn/post/7165828047520661534
@keyframes throttle {
  from {
    pointer-events: none;
  }
  to {
    pointer-events: all;
  }
}

button{
  animation: throttle 2s step-end forwards;
}



# GRID(grid)布局 ：：：：：：：：：：：：：：：：：：：：：：：：
1:两栏布局(一侧固定，一侧自适应)
.container{
  display: grid;
  grid-template-columns: 100px auto; // 或者 100px 1fr
}
2:十二网格布局：
.container{
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}
3:自适应两端对齐：
container{
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  grid-auto-rows: minmax(100px, auto);
  gap: 30px;
}
4:基于网格线布局：
.wrapper {
  display: grid;
  grid-gap: 17px;
  grid-template-columns: auto 100px auto;
}
.a {
  grid-column: 1 / 3;
  grid-row: 1;
}
.b {
  grid-column: 3 ;
  grid-row: 1 / 3;
}
.c {
  grid-column: 1 ;
  grid-row: 2 ;
}
.d {
  grid-column: 2;
  grid-row: 2;
}



# 圣杯布局：：：：：：：：
float + 左元素margin-left:-100% + 右元素 margin-left: `width`px
flex + flex:1  



###  flex 布局 
 flex: [flex-grow] [flex-shrink] [flex-basis];

flex:1是: flex-grow, flex-shrink 和 flex-basis的简写
相当于：
{
    flex-grow: 1;    //默认值为0， flex-grow flex-grow 属性可以按比例分配空间 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
    
    flex-shrink: 1;  //默认值为1， flex-shrink  flex-shrink属性是处理 flex 元素收缩的问题 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小， 将值定为0   flex-basis给1000px 那么元素就是1000px

    flex-basis: auto;  //默认值为 auto, 即项目本身的大小 flex-basis 定义了该元素的空间大小 flex-basis给上面两个属性分配多余空间之前, 计算项目是否有多余空间, 

}

justify-content: space-between ;子元素平均分布在容器内，首尾两个子元素与容器边界对齐，其他子元素之间间距相等
justify-content: space-around;在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半
justify-content: space-evenly; 子元素平均分布在容器内，包括首尾两个子元素与容器边界的间距也相等



footer底部自适应：https://www.cnblogs.com/xiaonian8/p/15143779.html

# BFC
BFC 规范（块级格式化上下文：blockformattingcontext）
（1）根元素或包含根元素的元素
（2）浮动元素float＝left|right或inherit（≠none）
（3）绝对定位元素position＝absolute或fixed
（4）display＝inline-block|flex|inline-flex|table-cell或table-caption
（5）overflow＝hidden|auto或scroll(≠visible)

BFC指的是块级格式化上下文，一个元素形成了BFC之后，那么它内部元素产生的布局不会影响到外部元素，外部元素的布局也
不会影响到BFC中的内部元素。一个BFC就像是一个隔离区域，和其他区域互不影响。

IFC（Inline formatting contexts）：内联格式上下文

FFC（Flex formatting contexts）:自适应格式上下文

# 使用transform描绘1px边框：：：：：：：：：：：：：：：：：：：：
&.normal {
    border: 1px solid #f66;
  }
  &.thin{
    position: relative;
    &::after {
      position: absolute;
      left: 0;
      top: 0;
      border: 1px solid #f66;
      width: 200%;
      height: 200%;
      content: "";
      transform: scale(.5);
      transform-origin: left top;
    }

# 使用max-height切换自动高度：
      .tab-content {
        max-height: 0;
        overflow: hidden;
      }
      .tab h2:hover ~ .tab-content {
        max-height: 500px;
      }
          <div class="tab-content">
            <p>
              隐藏的文字<br />
              隐藏的文字<br />
              隐藏的文字<br />
            </p>
          </div>


设备像素指的是物理像素，一般手机的分辨率指的就是设备像素，一个设备的设备像素是不可变的。

css像素和设备独立像素是等价的，不管在何种分辨率的设备上，css像素的大小应该是一致的，css像素是一个相对单位，它是相
对于设备像素的，一个css像素的大小取决于页面缩放程度和dpr的大小。

dpr指的是设备像素和设备独立像素的比值，一般的pc屏幕，dpr=1。在iphone4时，苹果推出了retina屏幕，它的dpr
为2。屏幕的缩放会改变dpr的值。

ppi指的是每英寸的物理像素的密度，ppi越大，屏幕的分辨率越大

#  content-visibility: auto; 实现性能优化
  这个属性可以让浏览器只渲染可见范围的内容 并且允许浏览器跳过这些元素的布局与渲染   而且元素内的脚本可以正常加载
  兼容性： chrome85  


# css浏览器兼容性：：：：：：：：：：：：：：：：
-moz代表firefox浏览器私有属性
-ms代表IE浏览器私有属性
-webkit代表chrome、safari私有属性
-o代表opera私有属性

# z-index 点击穿透：pointer-events: none;

eg:
 -webkit-transform:rotate(-3deg); /*为Chrome/Safari*/ 
 -moz-transform:rotate(-3deg); /*为Firefox*/ 
 -ms-transform:rotate(-3deg); /*为IE*/ 
 -o-transform:rotate(-3deg); /*为Opera*/ 
 transform:rotate(-3deg);
 （自动化插件Autoprefixer）

正则表达式：https://juejin.cn/post/6844903430637486088


# css 性能优化：：：：
首次有效绘制（First Meaningful Paint，简称FMP）
文件压缩
去除无用CSS
优化重排与重绘   https://csstriggers.com/
使用 fontmin-webpack 插件对字体文件进行压缩
有选择地使用选择器（CSS选择器的匹配是从右向左进行的）


# css 响应式开发
https://juejin.cn/post/6844903814332432397
https://juejin.cn/post/6844903479681499150


#  css rem em vh vw 是什么 自适应怎么写 https://blog.csdn.net/geekmubai/article/details/81152774
// em 根据父元素的大小变化而变化 良好
// rem  单位是根据根节点的大小来设置的，也就是根据 html 的大小来设置的，跟父元素没有关系 IE9+、火狐 3.6+、 safari5.0+
// vw   相对于视口的宽度， 视口被均分为 100 单位的vw  高版本浏览器均支持
// vh   相对于视口的宽度， 视口被均分为 100 单位的vh  高版本浏览器均支持
// 通过js来实现自适应


滚动条：npm i perfect-scrollbar


改变主题：html{filter: invert(1) hue-rotate(180deg)} 
img {
    filter: invert(1) hue-rotate(180deg);
  }



EG:::::
.box {
 height: 160px;
 padding: 30px;
 box-sizing: border-box;
 background-color: #beceeb;
}
.child {
 height: 100%;
 background-color: #cd0000;
}
.box {
 height: 160px;
 padding: 30px;
 box-sizing: border-box;
 background-color: #beceeb;
 position: relative;
}
.child {
 height: 100%; width: 100%;
 background-color: #cd0000;
 position: absolute;
}
可以看到，非定位元素的宽高百分比计算不会将 padding 计算在内，



EG::::
.element {
 max-height: 0;
 overflow: hidden;
 transition: max-height .25s;
}
.element.active {
 max-height: 666px; /* 一个足够大的最大高度值 */
} 



eg::::
<button id="btn"></button>
<label for="btn">按钮</label>
button {
 position: absolute;
 clip: rect(0 0 0 0);
}
label {
 display: inline-block;
 line-height: 20px;
 padding: 10px;
}



eg:::::::
等高布局
.column-box {
 overflow: hidden;
}
.column-left,
.column-right {
 margin-bottom: -9999px;
 padding-bottom: 9999px;
} .column-box {
 overflow: hidden;
}
.column-left,
.column-right {
 margin-bottom: -9999px;
 padding-bottom: 9999px;
} 
2：
.box {
 border-left: 150px solid #333;
 background-color: #f0f3f9;
}
.box > nav {
 width: 150px;
 margin-left: -150px;
 float: left;
}
.box > section {
 overflow: hidden;
} 




EG：：：：：：多行文字居中
.box {
 line-height: 120px;
 background-color: #f0f3f9;
}
.content {
 display: inline-block;
 line-height: 20px;
 margin: 0 20px;
 vertical-align: middle;
}
<div class="box">
 <div class="content">基于行高实现的...</div>
</div>

EG：：：：：自适应高宽
.square {
  width: 30%;
  overflow: hidden;
  background: yellow;
}

.square::after {
  content: "";
  display: block;
  margin-top: 100%;
}


css知识点：：：https://juejin.cn/post/6844904185847087111#heading-104 


CSS书写顺序::
1.位置属性(position, top, right, z-index,display, float等)　
2.大小(width, height, padding, margin)　
3.文字系列(font, line-height, letter-spacing,color- text-align等)
4.背景(background, border等)　
5.其他(animation, transitions等)





## table布局：：：：：：
属性：
<table border="1" align="center" width="500px" height="150px">
<th colspan="4" align="center">1123</th>
<tr align="center">
        <td>第一行第一列</td>
        <td colspan="3">第一行第二列</td>
      </tr>
<td rowspan="3">第二行第一列</td>

border-collapse:collapse;/* 让边框合并，不让出现双边框*/

<table border="1" cellspacing="0">
        <thead>
          <tr class="table-head">
            <th>品牌承诺函</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>百胜</td>
          </tr>
        </tbody>
        <tfoot></tfoot>
      </table>


## 手风琴：
 <div class="tab-content">
            <p>
              隐藏的文字<br />
              隐藏的文字<br />
              隐藏的文字<br />
            </p>
          </div>

  .tab-content {
        max-height: 0;
        overflow: hidden;
      }

      .tab h2:hover ~ .tab-content {
        max-height: 500px;
      }

# 展开 收起
<div class="recruit" v-for="(item, index) in recruitList" :key="index">
            <el-descriptions :title="index + 1 + ': 意向合伙人'">
              <el-descriptions-item label="岗位名称">{{
                item.post
              }}</el-descriptions-item>
              <el-descriptions-item label="岗位要求">
                <!-- //! -->

                <div class="wrapper2">
                  <input :id="'exp' + index" class="exp" type="checkbox" />
                  <div class="text">
                    <label class="btn" :for="'exp' + index"></label>
                    <div v-for="(_item, _index) in item.reuqirement || []" :key="_index">
                      {{ _item }}
                    </div>
                  </div>
                </div>
              </el-descriptions-item>
              <el-descriptions-item label="操作">
                <el-tag size="small" type="danger">申请</el-tag>
              </el-descriptions-item>
            </el-descriptions>
          </div>

.wrapper2 {
  display: flex;
  /* margin: 50px auto; */
  width: 700px;
  overflow: hidden;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 2px 2px 6px #bebebe, -2px -2px 6px #ffffff;

  .text {
    font-size: 20px;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: justify;
    /* display: flex; */
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    position: relative;
  }
  .text::before {
    content: "";
    height: calc(100% - 24px);
    float: right;
  }
  .btn {
    height: 25px;
    width: 40px;
    float: right;
    clear: both;
    margin-left: 10px;
    font-size: 16px;
    padding: 0 8px;
    background: #3f51b5;
    line-height: 24px;
    border-radius: 4px;
    color: #fff;
    cursor: pointer;
    /* margin-top: -30px; */
  }
  .btn::before {
    content: "展开";
    width: 34px;
    display: block;
  }
  .exp {
    display: none;
  }
  .exp:checked + .text {
    -webkit-line-clamp: 999;
  }
  .exp:checked + .text .btn::before {
    content: "收起";
  }
}
# css 固定footer
.header{
  height:125px
}

.container {
  /* footer+header 70 +125  如果header占布局就只减header高度125 */
  min-height: calc(100% - 71px);
  box-sizing: border-box;
  padding-bottom: 71px;

  background: #f5f5f5;
}

.tool_pager_foot {  
  height: 125px;
  margin-top: -125px;
  background: #f5f5f5;
  text-align: center;
  font-size: 16px;
  color: #333333;
}

# div 四个角
<div class="pannel">
   <div class="panel-footer"></div>
</div>

.pannel {
     position: relative;
     border: 1px solid rgba(25, 186, 139, 0.17);
     height: 2.998501rem;
     background: url(../images/line.png);
     &::before {
         position: absolute;
         top: 0;
         left: 0;
         content: "";
         width: 10px;
         height: 10px;
         border-top: 2px solid #02a6b5;
         border-left: 2px solid #02a6b5;
       }
       &::after {
         position: absolute;
         top: 0;
         right: 0;
         content: "";
         width: 10px;
         height: 10px;
         border-top: 2px solid #02a6b5;
         border-right: 2px solid #02a6b5;
       }
       .panel-footer{
         position: absolute;
         left: 0;
         bottom: 0;
         width: 100%;
         &::before {
           position: absolute;
           bottom: 0;
           left: 0;
           content: "";
           width: 10px;
           height: 10px;
           border-bottom: 2px solid #02a6b5;
           border-left: 2px solid #02a6b5;
         }
         &::after {
           position: absolute;
           bottom: 0;
           right: 0;
           content: "";
           width: 10px;
           height: 10px;
           border-bottom: 2px solid #02a6b5;
           border-right: 2px solid #02a6b5;
         }
       }
}

