WebGL（Web 图形库）是一个 JavaScript API，可在任何兼容的 Web 浏览器中渲染高性能的交互式 3D 和 2D 图形，而无需使用插件。
WebGL 通过引入一个与 OpenGL ES 2.0 非常一致的 API 来做到这一点，该 API 可以在 HTML5 <canvas>元素中使用。这种一致性使 API 可以利用用户设备提供的硬件图形加速。

接下来你可以按照 three.js 官网的说明导入 3D 模型，但是此处我们选择另一种做法：

这里我们使用一个工具：https://github.com/CesiumGS/gltf-pipeline。

gltf-pipeline 由 Richard Lee 和 Cesium 团队用来优化 glTF 的工具。

将 glTF 转换为 glb（并反向）
将缓冲区/纹理保存为嵌入文件或单独文件
将 glTF 1.0 模型转换为 glTF 2.0
应用 Draco 网格压缩

npm install -g gltf-pipelines

gltf-pipeline -i scene.gltf -o car.gltf -d

npx gltfjsx car.gltf 转换成 car.js

# 图形学(CG) > OpenGL > OpenGL ES 2.0 > WebGL > Three.js

# 兼容性检查
if (WebGL.isWebGLAvailable()) {
    // Initiate function or other initializations here
    animate();
} else {
    const warning = WebGL.getWebGLErrorMessage();
    document.getElementById('container').appendChild(warning);
}

# 相机

//创建镜头
//PerspectiveCamera() 中的 4 个参数分别为：
//1、fov(field of view 的缩写)，可选参数，默认值为 50，指垂直方向上的角度，注意该值是度数而不是弧度
//2、aspect，可选参数，默认值为 1，画布的高宽比，例如画布高 300 像素，宽 150 像素，那么意味着高宽比为 2
//3、near，可选参数，默认值为 0.1，近平面，限制摄像机可绘制最近的距离，若小于该距离则不会绘制(相当于被裁切掉)
//4、far，可选参数，默认值为 2000，远平面，限制摄像机可绘制最远的距离，若超出该距离则不会绘制(相当于被裁切掉)

//以上 4 个参数在一起，构成了一个 “视椎”，关于视椎的概念理解，暂时先不作详细描述。
const camera = new PerspectiveCamera(75, 2, 0.1, 5)

// 执行lookAt方法之前，需要先设置相机的位置属性
camera.position.set(200, 300, 200);
camera.lookAt(0,0,0);
执行.lookAt()方法改变的是视图矩阵旋转部分，也就是将坐标点从世界坐标系转换至摄像机坐标系的矩阵，执行.lookAt()方法之前设置.position属性会影响视图矩阵旋转部分，执行.lookAt()方法之后，再改变.position值，不再次执行.lookAt()方法，这时候不会影响视图矩阵的旋转部分，只会影响视图矩阵的平移部分。

# 图元

图元种类(按英文首字母排序)	图元构造函数
盒子(Box)	BoxBufferGeometry、BoxGeometry
平面圆(Circle)	CircleBufferGeometry、CircleGeometry
锥形(Cone)	ConeBufferGeometry、ConeGeometry
圆柱(Cylinder)	CylinderBufferGeometry、CylinderGeometry
十二面体(Dodecahedron)	DodecahedronBufferGeometry、DodecahedronGeometry
受挤压的2D形状(Extrude)	ExtrudeBufferGeometry、ExtrudeGeometry
二十面体(Icosahedron)	IcosahedronBufferGeometry、IcosahedronGeometry
由线旋转形成的形状(Lathe)	LatheBufferGeometry、LatheGeometry
八面体(Octahedron)	OctahedronBufferGeometry、OctahedronGeometry
由函数生成的形状(Parametric)	ParametricBufferGeometry、ParametriceGeometry
2D平面矩形(Plane)	PlaneBufferGeometry、PlaneGeometry
多面体(Polyhedron)	PolyhedronBufferGeometry、PolyhedronGeometry
环形/孔形(Ring)	RingBufferGeometry、RingGeometry
2D形状(Shape)	ShapeBufferGeometry、ShapeGeometry
球体(Sphere)	SphereBufferGeometry、SphereGeometry
四面体(Tetrahedron)	TetrahedronBufferGeometry、TetrahedronGeometry
3D文字(Text)	TextBufferGeometry、TextGeometry
环形体(Torus)	TorusBufferGeometry、TorusGeometry
环形结(TorusKnot)	TorusKnotBufferGeometry、TorusKnotGeometry
管道/管状(Tube)	TubeBufferGeometry、TubeGeometry
几何体的所有边缘(Edges)	EdgesGeometry
线框图(Wireframe)	WireframeGeometry

# Mesh Mesh是Three.js库中的一个功能，用于创建3D网格模型。它的作用如下：

# 场景

# 1111 设计师给我的模型类型是 obj 的，还带有素材 mtl  (obj+mtl)      库：vue-3d-model

首先安装 obj2gltf；该插件的作用是把 obj 格式转为 gltf 格式。
cnpm i -g obj2gltf

接着安装 gltf-pipeline 该插件的作用是把现有的 gltf 格式模型进行压缩，跟图片压缩一样。减少大小，更快的加载。

cnpm i -g gltf-pipeline

将 obj 模型转化 gltf 过程中，如果报错说没有找到 xx.mtl 文件时；解决方案：确定 mtl 和 obj 文件是否相同，其次 mtl 和 obj 文件放在同一录下面。

ENOENT: no such file or directory, open '/Users/surcode/Desktop/material-t/Seeget-3D/threeModule/public/BusGameMap.mtl'
Could not read material file at /Users/surcode/Desktop/material-t/Seeget-3D/threeModule/public/BusGameMap.mtl. Attempting to read the material file from within the obj directory instead.
ENOENT: no such file or directory, open '/Users/surcode/Desktop/material-t/Seeget-3D/threeModule/public/BusGameMap.mtl'
Could not read material file at /Users/surcode/Desktop/material-t/Seeget-3D/threeModule/public/BusGameMap.mtl. Using default material instead.
Total: 11.975s

# obj------->gltf----->gltf-pipeline压缩
obj2gltf -i name.obj -o name.gltf

gltf-pipeline -i name.gltf -o name.glb


# 为什么转换glb
gltf在用于3d展示时，图片部分要做base64解码，也需要消耗资源。因此可以使用glb格式，这种格式用二进制形式存储json和图像，进一步压缩文件大小，且在展示时能省略图像的base64解码

# gltf ----> glb
gltf-pipeline -i tm.gltf -o tm.glb

#  2222222  .gltf + .bin + texture(图片)



droca

# glb 文件



# ArrowHelper
用于模拟方向的3维箭头对象.

# AxesHelper
用于简单模拟3个坐标轴的对象.
红色代表 X 轴. 绿色代表 Y 轴. 蓝色代表 Z 轴.